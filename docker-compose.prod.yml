services:
  nginx:
    build:
      context: ./_docker/images/nginx/
      dockerfile: Dockerfile
    container_name: task_nginx
    volumes:
      - ./:/var/www/backend
      - /var/www/task_manager/frontend:/var/www/frontend
      - ./_docker/images/nginx/conf.d/production:/etc/nginx/conf.d
      - ./_docker/images/nginx/conf.d/nginx.conf:/etc/nginx/nginx.conf
      # - /var/www/task_manager/ssl/www/:/var/www/certbot/:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - task_network

  # certbot:
  #   image: certbot/certbot:latest
  #   container_name: task_certbot
  #   volumes:
  #     - /var/www/task_manager/ssl/www/:/var/www/certbot/:rw
  #     - /var/www/task_manager/ssl/conf/:/etc/letsencrypt/:rw
  #   # entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
  #   networks:
  #     - task_network

  php:
    build:
      context: ./_docker/images/php
      dockerfile: Dockerfile
    container_name: task_php
    volumes:
      - ./_docker/images/php/conf.d:/usr/local/etc/php/conf.d
      - ./:/var/www/backend
    depends_on:
      - postgres
    networks:
      - task_network

  postgres:
    image: postgres:latest
    container_name: task_postgres
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE}
      TZ: Asia/Tashkent
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - task_network

  pgadmin:
    image: dpage/pgadmin4
    container_name: task_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@task.uz
      PGADMIN_DEFAULT_PASSWORD: 3~1HYhp4e3@n
    ports:
      - "8080:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - task_network

  redis:
    image: redis:latest
    container_name: task_redis
    command:
      [
          "sh",
          "-c",
          "redis-server --requirepass $${REDIS_PASSWORD}"
      ]
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    networks:
      - task_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  task_network:
    driver: bridge
